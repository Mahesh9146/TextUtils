{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","togglemode","htmlFor","TextForm","useState","text","setText","style","color","rows","value","onChange","event","target","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","Select","navigator","clipboard","writeText","split","length","lenght","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","About","body","heading","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e2602503.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/about\">\r\n                {props.About}\r\n              </a>\r\n            </li> */}\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              onClick={props.togglemode}\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              EnableDarkMode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  About: PropTypes.string,\r\n};\r\n\r\n// Navbar.defaultProps = {\r\n//   title: \"Setyourtitlehere\",\r\n//   About: \"aboutme\",\r\n// };\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    // console.log(\"handleUpclick is clicked\");\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"your text is converted to uppercase!\",\"success\")\r\n  };\r\n  const handleLowClick = () => {\r\n    //   console.log(\"lowclick clicked \");\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"your text is converted to lowercase!\",\"success\")\r\n  };\r\n  const handleClearClick = () => {\r\n    //   console.log(\"lowclick clicked \");\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"your text is cleared!\",\"success\")\r\n  };\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n  const handleCopy = () => {\r\n    var text = document.getElementById(\"myBox\");\r\n    text.Select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"your text is copied!\",\"success\")\r\n  };\r\n\r\n  const [text, setText] = useState(\"\");\r\n  return (\r\n    <>\r\n      <div>\r\n        <div className=\"my-3\" style={{color: props.mode === \"dark\" ? \"white\" : \"#042743\"}} >\r\n          <label htmlFor=\"myBox \" className=\"form-label\">\r\n            Enter Your Text Here\r\n          </label>\r\n          <textarea\r\n            className=\"form-control \"\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n           style={{backgroundColor:\r\n              props.mode === 'dark' ?'grey' :'white', color: props.mode === \"dark\" ? \"white\" : \"#042743\"\r\n            }}\r\n          ></textarea>\r\n          <button className=\"btn btn-primary my-2 mx-1\" onClick={handleUpClick}>\r\n            ConvertToUppercase\r\n          </button>\r\n          <button className=\"btn btn-primary mx-1\" onClick={handleLowClick}>\r\n            ConvertToLowercase\r\n          </button>\r\n          <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>\r\n            ClearText\r\n          </button>\r\n          <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>\r\n            CopyText\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"container my-2\" style={{color: props.mode === \"dark\" ? \"white\" : \"#042743\"}} >\r\n        <h2>Your Text summary</h2>\r\n        <p>\r\n          {text.split(\" \").length} words and\r\n          {text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} Minutes to read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.lenght>0?text:\"Enter your text into box to preview here\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize=(word)=> {\r\n        const lower = word.toLowerCase()\r\n        return lower.charAt(0).toUpperCase()+ lower.slice(1)\r\n\r\n    }\r\n\r\n    return (\r\n       props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  \r\n  <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n  \r\n</div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import \"./App.css\";\nimport React, { useState } from \"react\";\n// import About from \"./Components/About\";\nimport Navbar from \"./Components/Navbar\";\nimport TextForm from \"./Components/TextForm\";\nimport Alert from \"./Components/Alert\";\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message,type)=> {\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 2000);\n  }\nconst togglemode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor= '#042743'\n      showAlert(\"Dark mode has been enabled\",\"success\")\n      document.title ='Textutils-Dark Mode'\n      // setInterval(() => {\n      //   document.title ='install textutils is amazing'\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title ='install textutils '\n      // }, 1500);\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor= 'white'\n      showAlert(\"Light mode has been enabled\",\"success\")\n      document.title ='Textutils-Light Mode'\n    }\n  }\n  return (\n    <>\n  {/* <Router> */}\n\n      {/* <Navbar /> */}\n      <Navbar\n        title=\"Textutils\"\n        About=\"About\"\n        mode={mode}\n        togglemode={togglemode}\n      />\n     <Alert  alert={alert}/>\n      <div className=\"container my3\">\n     {/* <Switch> */}\n          {/* <Route exact path=\"/about\">\n            <About />\n          </Route> */}\n          {/* <Route exact path=\"/\"> */}\n        {/* </Route> */}\n <TextForm heading=\"Enter the text to analyze\" mode={mode} showAlert={showAlert}/> \n        {/* </Switch> */}\n         </div>\n       {/* </Router> */}\n       </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}